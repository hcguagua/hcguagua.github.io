<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>面试准备</title>
    <link href="/2024/05/09/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    <url>/2024/05/09/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<p><strong>华为面试准备</strong></p><p>技能模板：</p><ul><li>熟悉软件测试理论基础、测试流程、测试用例设计方法和缺陷管理工具，如JIRA、禅道等。</li><li>熟练掌握Python+Selenium+WebDriver自动化测试框架，能够使用PO模式封装页面元素和操作方法，使用Excel和ddt进行数据驱动，使用pytest和allure生成测试报告，能够独立搭建WebUI自动化测试框架。</li><li>熟练使用Postman进行接口测试，能够构造请求参数和校验响应结果，使用Fiddler进行数据抓包和分析，能够定位前后端问题。</li><li>熟练使用JMeter进行性能测试，能够分析性能需求，设计性能场景，构造性能数据，执行性能测试，并分析性能指标和瓶颈。</li><li>熟练使用MySQL数据库，能够编写SQL语句进行数据查询和操作，保证数据的准确性和完整性。</li><li>熟悉APP测试，掌握ADB常用命令，能够使用Monkey对APP进行稳定性测试。</li><li>了解Git分布式版本控制系统。</li><li>了解基于Django框架的Web开发，了解HTML、CSS、Javascript、Bootstrap、Jquery等前端开发技术。</li></ul><ol><li><p>自我介绍</p><p>面试官您好，我叫黄杰，今年24岁，来自重庆合川，2021年毕业于重庆交通大学。毕业后有两段工作经历，第一份工作是在中建五局安装工程有限公司做暖通工程师，主要负责施工现场管理、暖通技术支持、施工图纸设计等。第二份工作是在一家社交类产品的互联网公司，做测试工程师，主要负责公司已上线产品的版本迭代测试，负责时间比较长的的移动端安卓产品的迭代测试工作。工作内容是以功能测试为主，也会包含部分接口测试、自动化测试、专项测试。</p><p>以上就是我的简单的自我介绍，谢谢面试官。</p></li><li><p>功能测试，工作内容包括哪些？</p><ul><li><strong>根据需求分析和设计测试用例</strong>：覆盖产品的各种功能和场景，确保测试用例的质量和有效性</li><li><strong>执行测试用例</strong>：使用浏览器调试助手、抓包工具等辅助工具，检查产品的功能是否符合预期，是否存在缺陷或问题</li><li><strong>提交和跟踪缺陷</strong>：使用专业的语言和格式，描述缺陷的重现步骤、影响范围和严重程度，与开发人员沟通和协调，验证缺陷的修复情况</li><li><strong>编写测试报告</strong>：总结测试过程中的发现、建议和改进，评估产品的质量和风险，为产品的发布提供参考</li><li><strong>协助完成其他相关工作</strong>：如平台配置、功能发布、视频录制、培训、问题解答、满意度调查等</li></ul></li><li><p>测试用例包含的 要素</p><ul><li><strong>用例编号</strong>：用来唯一标识每条测试用例，方便管理和跟踪。</li><li><strong>功能子模块</strong>：用来表示测试用例所属的功能模块或页面，便于分类和组织。</li><li><strong>测试目的</strong>：用来简要说明测试用例的目标和意义，让人一目了然。</li><li><strong>前置条件</strong>：用来描述测试用例执行之前需要满足的条件，比如数据准备、环境配置等。</li><li><strong>优先级</strong>：用来表示测试用例的重要性和紧急程度，一般分为高、中、低三个等级，指导测试人员安排测试顺序和时间。</li><li><strong>操作步骤</strong>：用来详细描述测试用例的具体操作过程，包括输入、点击、切换等动作，要清晰、完整、准确。</li><li><strong>输入数据</strong>：用来给出测试用例中涉及的参数或变量的具体值，要覆盖正常、异常、边界等情况。</li><li><strong>预期结果</strong>：用来给出测试用例执行后应该出现的结果或反馈，要与需求规格说明书保持一致。</li><li><strong>执行状态</strong>：用来表示测试用例是否已经被执行过，一般分为已执行和未执行两种状态。</li><li><strong>执行结果</strong>：用来表示测试用例执行后的实际结果或反馈，一般分为通过和不通过两种结果。</li><li><strong>对应jira bug-id</strong>：如果测试用例执行结果为不通过，需要在禅道上记录对应的bug，并填写bug的唯一id值，方便追踪和管理。</li><li><strong>编写人</strong>：用来记录测试用例的编写人员，便于沟通和负责。</li><li><strong>执行人</strong>：用来记录测试用例的执行人员，便于沟通和负责。</li><li><strong>备注</strong>：用来补充一些额外的信息，比如业务逻辑、规则、需求、预期结果等，让人看得更明白。</li></ul></li><li><p>黑盒测试和白盒测试的区别</p><ul><li>白盒测试需要从代码句法发现内部代码在算法，溢出，路径，条件等等中的缺点或者错误，进而加以修正。而黑盒测试着重测试软件功能，它并不涉及程序的内部结构和内容特性。黑盒测试并不能取代白盒测试，它与白盒是互补的测试方法，它很可能发现白盒测试不易发现的其他类型错误。</li><li>黑盒测试是从最终用户的角度进行的，而白盒测试是从开发人员的角度进行的</li><li>黑盒测试可以应用于软件测试的每个级别，如单元测试、集成测试、系统测试和验收测试，而白盒测试主要用于单元测试、集成测试和回归测试</li></ul></li><li><p>给你一个场景，设计测试用例</p><ol><li>功能需求、界面：验证软件是否能够打开聊天窗口，输入文本，限制字数在200字以内。</li><li>用户场景、易用性：验证软件是否能够支持不同的输入方式，如键盘、语音、表情等。验证软件是否能够显示输入的文本和字数。验证软件是否能够发送和接收文本消息。</li><li>边界条件：验证软件是否能够正确处理空输入、超过200字的输入、非法字符的输入等。验证软件是否能够提示用户输入错误或超出限制。</li><li>兼容性：验证软件是否能够在不同的平台、环境和设备上正常运行。验证软件是否能够适应不同的屏幕尺寸、分辨率和字体大小。</li><li>安全性：验证软件是否能够保护用户的隐私和数据安全。验证软件是否能够防止恶意攻击和篡改消息。</li></ol></li><li><p>安全测试相关</p><p>用来验证集成在系统内的保护机制是否能够在实际中保护系统不受到非法的侵入。</p><p>常见的有：</p><p><strong>sql注入，DDOS（分布式拒绝服务攻击）, Cookie欺骗、认证和授权、xss攻击、</strong></p><p>DDoS是Distributed Denial of Service的缩写，意思是“分布式拒绝服务”。DDoS攻击是一种恶意的网络攻击，通过利用多个被感染的计算机或设备（称为botnet）向目标服务器、服务或网络发送大量的流量，从而使其无法正常运行。DDoS攻击的目的是阻断正常用户的访问，给目标造成金钱或信誉上的损失。</p><p>SQL注入是一种web安全漏洞，使攻击者可以在应用程序对数据库执行的SQL查询中插入恶意代码。这可能导致攻击者查看、修改或删除数据库中的敏感数据，或者执行其他恶意操作。SQL注入的本质是把用户输入的数据当作代码来执行，违背了“数据与代码分离”的原则。SQL注入的产生需要满足以下两个条件：1、参数用户可控：前端传给后端的参数用户可控。2、参数带入数据库查询：传入的参数拼接到SQL语句中，且带入数据库中查询。</p><p>Cookies欺骗是通过盗取、修改、伪造Cookies的内容来欺骗Web系统,并得到相应权限或者进行相应权限操作的一种攻击方式。</p></li><li><p>常用的linux命令</p><ol><li><p>目录管理 cd pwd ls ll mkdir rmdir mv cp</p></li><li><p>文件管理 </p><ol><li>文件操作命令 touch <strong>vi</strong> cp mv rm ln wc</li><li>文件查看操作 <strong>cat</strong> head more less <strong>tail</strong> find sort **grep ** file</li><li>文件比较操作 diff cmp  which</li></ol></li><li><p>用户管理 useradd(adduser) passwd usermod userdel groupadd </p></li><li><p>权限管理 <strong>chmod</strong> chown chgrp</p></li><li><p>系统设置 alise echo export</p></li><li><p>网络通信 <strong>ifconfig</strong> hostname netstat(显示网络状态) ping </p></li><li><p>磁盘管理 df fu <strong>top</strong> <strong>ps</strong>(ps -ef 或者ps -aux查看所有进程 ，杀掉进程kill -9 pid) vmstat(显示虚拟内存)</p></li><li><p>备份压缩 gzip&#x2F;gunzip <strong>tar</strong> zip&#x2F;unzip</p><p>•cvf-只对文件进行打包，没压缩</p><p>•xvf-对.tar 文件进行解包</p><p>•zcvf-打包同时实现压缩，生成.tar.gz</p><p>•zxvf-对压缩后的打包文件进行解压</p></li><li><p>其他 clear date shutdown poweroff&#x2F;reboot</p></li></ol></li><li><p>黑盒测试和白盒测试的常用方法</p><ol><li><p>黑盒：</p><ol><li>等价类划分法：把所有可能的输入数据划分为若干个互不相交的子集，称为等价类，然后从每个等价类中选取代表性的数据作为测试用例。</li><li>边界值分析法：选取正好等于、刚刚大于或刚刚小于等价类边界的值作为测试数据，因为边界是最容易出错的地方。</li><li>因果图法：根据软件规格说明中的原因和结果，画出因果图，然后转换为决策表，设计测试用例。</li><li>场景法：根据用户使用软件的场景或情境，设计测试用例。</li><li>正交实验设计法：利用正交表选择最优的测试组合，减少测试用例的数量。</li><li>判定表驱动分析法：把作为条件的所有输入的各种组合值以及对应输出值都罗列出来而形成的表格，称为决策表，利用决策表设计测试用例。</li><li>错误推测法：根据经验或直觉推测可能出现错误的地方，设计测试用例。</li></ol></li><li><p>白盒：</p><ol><li>语句覆盖法：要求每条可执行语句至少执行一次。</li><li>判定覆盖法：要求每个判定结构至少有真、假两种结果。</li><li>条件覆盖法：要求每个判定条件至少有真、假两种结果。</li><li>判定&#x2F;条件覆盖法：要求每个判定结构和每个判定条件都至少有真、假两种结果。</li><li>条件组合覆盖法：要求每个判定结构中所有可能的条件组合都至少出现一次。</li><li>路径覆盖法：要求程序中所有可能的路径都至少执行一次</li></ol></li></ol></li><li><p>接口测试相关</p><ol><li><p>接口类型</p><ul><li>对外接口：全面性测试</li><li>对内接口：漏洞测试、破坏性测试</li></ul></li><li><p>postman</p></li><li><p>数据埋点测试</p><p>埋点是在程序中的某个位置加上一个标记，当用户触发到某个行为的时候，就采集一下数据，然后将数据上报到某个位置进行存储，埋点的最终目的是收集到相关的数据，提供数据支撑。</p><p>上家公司是使用的第三方统计平台，GIO。</p></li></ol></li><li><p>专项测试相关</p><ol><li><strong>兼容性测试</strong>：测试App在不同的操作系统版本、屏幕分辨率、厂商ROM和网络类型下的功能和性能表现。</li><li><strong>流量测试</strong>：测试App在用户操作和后台运行时的流量消耗情况，优化流量使用效率。</li><li><strong>电量测试</strong>：测试App在不同的使用场景下的电量消耗情况，优化电池使用寿命。</li><li><strong>弱网络测试</strong>：测试App在网络不稳定、信号弱、中断等情况下的功能和性能表现，优化网络请求和缓存机制。</li><li><strong>稳定性测试</strong>：测试App在长时间运行或高压力下的稳定性，避免出现闪退、卡死、内存泄漏等问题。</li><li><strong>安全测试</strong>：测试App的安装包、敏感信息、账户密码、数据通信等方面的安全性，防止被反编译、劫持、注入、攻击等。</li><li><strong>环境相关测试</strong>：测试App在不同的用户环境下的功能和性能表现，考虑干扰因素、权限设置、第三方依赖、冲突场景等。</li></ol></li><li><p>性能测试（稳定性测试、压力、负载）</p><ol><li><p>用来测试软件在集成系统中 的运行性能的</p></li><li><p>性能测试的目标是度量系统相对于预定义目标的差距</p></li><li><p>性能测试工具，如Loadrunner, Jmeter, SilkPerformer, WebLoad</p></li><li><p>性能测试主要指标</p><ol><li><p>外部 </p><p>• 吞吐量：每秒钟系统能够处理的请求数、任务数 </p><p>• 响应时间：服务处理一个请求或一个任务的耗时 </p><p>• 错误率：一批请求中结果出错的请求所占比例</p></li><li><p>内部 </p><p>• 服务器的CPU、内存、网络、磁盘IO等</p></li></ol></li></ol></li><li><p>测试模型</p><p>​</p></li><li><p>怎么做好测试？</p></li><li><p>操作系统相关</p></li><li><p>from collections import Counter</p></li><li><p>测试的目的：发现被测试的产品和用户需求的差异，也就是缺陷</p><p>• 尽早介入测试发现缺陷，减少返工、降低开发维护成本</p><p>• 持续改进过程，帮助定义需求和设计</p><p>• 提高客户满意度，扩大市场份额</p><p>• 对产品质量完成全面评估、为产品发布、部署、鉴定和决策者提供信息</p><p>• 预防缺陷，通过缺陷分析和原因总结，规避后续同类缺陷的产生再犯</p></li><li><p>数据库mysql相关</p><ol><li><p>数据库模式定义语言DDL(Data Definition Language) </p><ol><li>CREATE</li><li>ALTER</li><li>DROP</li><li>TRUNCATE</li></ol></li><li><p>数据操作语言DML（Data Manipulation Language），用户通过它可以实现对数据库的基本操作</p><p>在DML中，应用程序可以对数据库作插，删，改，排，检等五种操作。</p><ol><li>INSERT</li><li>UPDATE</li><li>DELETE</li><li>SELECT</li></ol></li><li><p>查询语句标准格式</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> 字段 <br><span class="hljs-keyword">from</span> 表<br><span class="hljs-keyword">where</span> 条件<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段<span class="hljs-number">1</span>，字段<span class="hljs-number">2.</span>.；<br></code></pre></td></tr></table></figure></li><li><p>多表连接</p><ol><li>等值连接</li><li>不等连接</li><li>外连接（左连接、右连接）</li><li>自连接</li></ol></li><li><p>分组查询</p></li><li><p><img src="/../imgs/1715185646815.png" alt="1715185646815"></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> 字段 <br><span class="hljs-keyword">from</span> 表<br><span class="hljs-keyword">where</span> 条件<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组条件<br><span class="hljs-keyword">having</span> 符合条件的组<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段<span class="hljs-number">1</span>，字段<span class="hljs-number">2.</span>.；<br></code></pre></td></tr></table></figure></li><li><p>子查询</p></li></ol></li><li><p>IM push推送机制</p><p><a href="http://www.taodudu.cc/news/show-546423.html?action=onClick">http://www.taodudu.cc/news/show-546423.html?action=onClick</a></p><p>实现原理：</p><ol><li>应用服务器与推送服务器建立长连接。</li><li>应用服务器把推送请求和对应的消息内容 发送给推送服务器。</li><li>推送服务根据应用服务器传递的参数推送到指定的设备上。</li></ol><p>Android：海外谷歌FCM、国内是各厂商通道push和第三方通道PUSH</p><p>IOS：APNS</p><p>发现的印象深刻的问题：</p><ol><li><p>push重复发送</p><p>原因：推送了一条非透传消息，本来应该手机系统服务去解析这个通知然后展示到通知栏，但是app也去解析了一次，所以展示了两条一样的消息。解决办法：app不去解析。</p><p>透传是指数据传输时，不对数据做任何特殊的处理，原封不动地发送给接收方。也就是说，透传的通道完全“透明”的，它不管发送方传输的是什么数据，只负责将数据送到接收方手上即可，接收方可以直接解析出发送方发送的数据信息。</p><p>非透传则是指数据传输时，需要在数据传输前对数据进行加密或者压缩等操作，然后再进行传输。当接收方收到数据时，需要对加密或者压缩后的数据进行解密或者解压缩操作，才能获得真正的数据信息。所以，非透传通常需要使用特定的协议和算法来实现。</p><p><a href="https://www.iotrouter.com/news/1263.html">https://www.iotrouter.com/news/1263.html</a></p></li><li><p>通知过多会崩溃</p><p>原因：数组越界。客户端写的接收push的数组比较小，扩大了内存。</p></li><li><p>push交互区域是整个区域</p><p>原因：安卓开发错误使用了dialog函数。解决办法：修改了函数。</p></li></ol></li><li><p>Cookie、Session、Token区别在哪？</p><ol><li>session是诞生并保存在服务器，由服务器主导一切。</li><li>cookie是一种数据载体，把session放在cookie中送到客户端，cookie跟随每个http请求发送出去。</li><li>Token是诞生在服务器，但保存在浏览器，由客户端主导一切。可以放在cookie或Storage里面。持有Token就像持有令牌一样可以访问服务器。</li></ol><p>由于http是无状态的，想要实现保持登录，需要依靠cookie，cookie是一种可以实现每次http请求都自带数据给服务器的的技术。说白了Cookie就是一种存储在浏览器的数据而已。</p><p><img src="/../imgs/1715185663670.png" alt="1715185663670"></p><p>Session：当你登录成功后，在服务器生成SessionID和会话结束时间（以及一些其他参数），服务器Set-Cookie并且把SessionID加入Cookie，会话结束时间设置为cookie的有效期，浏览器拿到并保存Cookie，再依靠Cookie特性（每次http请求都会带上cookie）实现保持登录，直到Cookie的有效期失效，浏览器自行删除这个Cookie。</p><p>SessionID：是没有规律的字符串，服务器再发送Cookie之前会对这个含有SessionID的Cookie进行签名，所有是有一定安全性的。 </p><p><img src="/../imgs/1715185677335.png" alt="1715185677335"></p><p>由于用户体量的增加，服务器存储SessionID会引发很多不合理的地方，就诞生了新的技术JWT(JSON Web Token)。token是通过加密算法生成一个加密字符串，包含了用户的身份和权限信息，客户端每次请求都带上这个token，服务器端根据密钥解密token进行验证。</p><p>JWT是由三部分组成的：header.payload.·</p><ul><li><p>header 声明需要用什么算法来生成签名</p></li><li><p>payload 一些特定数据，比如有效期之类</p></li><li><p>signature签名</p><p><img src="/../imgs/1715185697160.png" alt="1715185697160"></p></li></ul><p><img src="/../imgs/1715185708040.png" alt="1715185708040"></p><p>​</p></li><li><p>网络协议模型</p><ol><li><p><strong>物理层协议</strong>：负责定义物理设备如何传输数据，例如双绞线、光纤、无线电波等。</p></li><li><p><strong>数据链路层协议</strong>：负责在物理层之上建立逻辑连接，确定数据的分组方式和意义，例如以太网、ARP、MAC等。</p></li><li><p><strong>网络层协议</strong>：负责在网络中进行寻址和路由，实现不同网络之间的互联，例如IP、ICMP、IGMP等。</p></li><li><p><strong>传输层协议</strong>：负责在网络层之上提供可靠或不可靠的数据传输服务，例如TCP、UDP等。</p></li><li><p><strong>应用层协议</strong>：负责定义应用程序之间的通信规则，例如HTTP、FTP、SMTP、DNS等</p></li></ol></li><li><p>python相关知识：</p><ol><li><p>sort和sorted底层实现原理</p><p>timsort算法，可以简单理解为 归并排序 和 二分插入排序 算法的混合体，号称世界上最好的排序算法。</p></li><li><pre><code class="hljs">__init__ 和 __new__</code></pre><p>相同点：</p><ol><li>都是类中的内置方法</li><li>都会在创建对象时自动调用</li></ol><p>不同点：</p><ol><li>new是创建实例，init是初始化实例</li><li>new方法在init方法之前被调用</li><li>new是类方法，init是实例方法</li></ol></li><li><p>Python除了全局作用域和局部作用域，还有哪些作用域？</p><p>嵌套作用域是指在一个函数内部定义另一个函数，内部函数可以访问外部函数的变量；</p><p>内置作用域是指Python预定义的一些变量和函数，例如print、len、range等</p></li><li><p>深拷贝、浅拷贝？</p><ul><li><p>浅拷贝</p><p>python拷贝一般都是浅拷贝，拷贝时，对象包含的子对象不拷贝，因此，源对象与拷贝对象会引用同一个子对象。</p></li><li><p>深拷贝</p><p>使用copy模块deepcopy函数，递归拷贝对象中包含子对象，源对象和拷贝对象所有的子对象也不相同。</p></li></ul></li></ol></li><li><p>婚恋社交产品核心功能：</p><ul><li><p><strong>实名认证</strong>：要求每一位注册的用户提供真实有效的资料，通过平台的认可方可进入。这样可以保证用户的安全和信任，也可以提高用户的质量和活跃度</p></li><li><p><strong>在线聊天</strong>：用户可以和朋友用语音和文字进行沟通交流是社交APP的首要功能，除此之外，还可实现视频通话，更加近距离的接触</p></li><li><p><strong>群聊互动</strong>：可支持2人以上的群组聊天，邀请共同兴趣爱好的人进入同一个群，方便彼此之间的交流</p><ul><li>聊天功能、消息管理、消息推送、权限管理、隐私管理、成员管理、网络环境、兼容测试</li></ul></li><li><p><strong>陌生交友</strong>：通过社交APP，用户可以扩大自己的交往的圈子，还可以很快结交到有着相同兴趣爱好的朋友</p></li><li><p><strong>社交圈</strong>：用户可以发表自己的心情、照片，随时随地与家人、朋友分享自己的经历</p></li><li><p><strong>定位服务</strong></p><ul><li><strong>使用系统自带的定位服务和GPS</strong>：这种方法是利用手机系统自带的定位服务和GPS功能，来获取用户的经纬度和地址信息。这种方法需要用户授予app使用位置的权限，并且可能受到磁场或其他环境的干扰</li><li><strong>使用外接SDK</strong>：这种方法是利用第三方提供的软件开发包（SDK），如高德SDK、百度SDK等，来获取用户的经纬度和地址信息。这种方法也需要用户授予app使用位置的权限，并且可能需要申请开发者账号和密钥</li><li><strong>使用外部接口</strong>：这种方法是利用外部提供的接口，如百度API、聚合数据API等，来获取用户的外网IP地址，然后根据IP地址推测用户的大致位置。这种方法不需要用户授予app使用位置的权限，但是可能不够准确，并且可能需要申请开发者账号和密钥</li></ul></li></ul></li><li><p>手撕算法题</p><p>题目难度和范围接近OD笔试，以LeetCode中的简单题和中等题为主，而且考察种子题的概率更大。所谓种子题，是指各种算法中最基础的那些题目，比如</p><ol><li>二分查找：LC35搜索插入位置</li><li>滑动窗口：LC3无重复字符的最长子串</li><li>DFS和BFS：LC200岛屿面积</li><li>回溯：LC46全排列</li><li>动态规划：LC300最长递增子序列等等</li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试图片上传</title>
    <link href="/2024/05/09/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    <url>/2024/05/09/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<p>cehi annaf</p><p><img src="/../imgs/1715185173372.png" alt="1715185173372"></p><h1 id="测绘图片"><a href="#测绘图片" class="headerlink" title="测绘图片"></a>测绘图片</h1><p><img src="/../imgs/1715185224373.png" alt="1715185224373"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>playwright</title>
    <link href="/2024/05/08/playwright/"/>
    <url>/2024/05/08/playwright/</url>
    
    <content type="html"><![CDATA[<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs clean"># <span class="hljs-keyword">import</span> time<br>#<br># <span class="hljs-keyword">from</span> playwright.sync_api <span class="hljs-keyword">import</span> Playwright, sync_playwright<br># <span class="hljs-keyword">import</span> subprocess<br>#<br># # 输入 Chrome 浏览器所在路径，并使用双引号将路径括起来<br># # chrome_path = <span class="hljs-string">&#x27;/Applications/Google Chrome.app/Contents/MacOS/Google Chrome&#x27;</span><br># chrome_path = <span class="hljs-string">&quot;C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe&quot;</span><br># debugging_port = <span class="hljs-string">&#x27;--remote-debugging-port=9223&#x27;</span><br>#<br># # 使用列表形式表示命令及其参数<br># command = [chrome_path, debugging_port]<br># subprocess.Popen(command)<br>#<br>#<br># def run(playwright: Playwright) -&gt; None:<br>#     # browser = playwright.chromium.launch(headless=<span class="hljs-literal">False</span>)<br>#     time.sleep(<span class="hljs-number">4</span>)<br>#     browser = playwright.chromium.connect_over_cdp(<span class="hljs-string">&#x27;http://localhost:9223&#x27;</span>)<br>#     default_context = browser.contexts[<span class="hljs-number">0</span>]<br>#     page = default_context.pages[<span class="hljs-number">0</span>]<br>#     print(page)<br>#<br>#     page = default_context.new_page()<br>#     page.goto(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>)<br>#<br>#<br># # 在这里调用 run() 函数<br># <span class="hljs-keyword">with</span> sync_playwright() <span class="hljs-keyword">as</span> playwright:<br>#     run(playwright)<br><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> playwright.sync_api <span class="hljs-keyword">import</span> Playwright, sync_playwright<br><br><span class="hljs-keyword">with</span> sync_playwright() <span class="hljs-keyword">as</span> playwright:<br>    browser = playwright.chromium.launch_persistent_context(<br>        # 指定本机用户缓存地址<br>        user_data_dir=r<span class="hljs-string">&quot;C:\Users\Jay\Desktop\截图\user&quot;</span>,<br>        # 指定本机google客户端exe的路径<br>        executable_path=<span class="hljs-string">&quot;C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe&quot;</span>,<br>        # 要想通过这个下载文件这个必然要开  默认是<span class="hljs-literal">False</span><br>        accept_downloads=<span class="hljs-literal">True</span>,<br>        # 设置不是无头模式<br>        headless=<span class="hljs-literal">False</span>,<br>        bypass_csp=<span class="hljs-literal">True</span>,<br>        slow_mo=<span class="hljs-number">10</span>,<br>        # 跳过检测<br>        args=[<span class="hljs-string">&#x27;--disable-blink-features=AutomationControlled&#x27;</span>, <span class="hljs-string">&#x27;--remote-debugging-port=9222&#x27;</span>]<br><br>    )<br>    page = browser.new_page()<br>    page.goto(<span class="hljs-string">&quot;https://console.ccpayment.com/balances/index&quot;</span>)<br>    # time.sleep(<span class="hljs-number">1000</span>)<br>    page.get_by_role(<span class="hljs-string">&quot;row&quot;</span>, name=<span class="hljs-string">&quot;logo TETH&quot;</span>).get_by_role(<span class="hljs-string">&quot;button&quot;</span>).nth(<span class="hljs-number">1</span>).click()<br>    page.get_by_label(<span class="hljs-string">&quot;Enter Address&quot;</span>).click()<br>    page.get_by_label(<span class="hljs-string">&quot;Enter Address&quot;</span>).fill(<span class="hljs-string">&quot;0x12438F04093EBc87f0Ba629bbe93F2451711d967&quot;</span>)<br>    page.get_by_label(<span class="hljs-string">&quot;Amount&quot;</span>).click()<br>    page.get_by_label(<span class="hljs-string">&quot;Amount&quot;</span>).fill(<span class="hljs-string">&quot;0.002&quot;</span>)<br>    page.get_by_role(<span class="hljs-string">&quot;button&quot;</span>, name=<span class="hljs-string">&quot;Send&quot;</span>).click()<br>    page.get_by_label(<span class="hljs-string">&quot;Payment Password&quot;</span>).click()<br>    page.get_by_label(<span class="hljs-string">&quot;Payment Password&quot;</span>).fill(<span class="hljs-string">&quot;111111&quot;</span>)<br>    page.get_by_role(<span class="hljs-string">&quot;button&quot;</span>, name=<span class="hljs-string">&quot;Confirm&quot;</span>).click()<br>    time.sleep(<span class="hljs-number">2</span>)<br>    page.get_by_label(<span class="hljs-string">&quot;close&quot;</span>).click()<br>    # print(page.title())<br>    time.sleep(<span class="hljs-number">200</span>)<br>    browser.close()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/07/hello-world/"/>
    <url>/2024/05/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
